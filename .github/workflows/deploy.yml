name: Deployment

concurrency:
  group: production
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  repository-projects: read

jobs:

  YAMLLint:
    name: 'YAMLLint'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2.3.4

      - name: 'Installing'
        run: python -m pip install yamllint

      - name: 'Running'
        run: yamllint -c .yamllint.yml .

  hadoLint:
    name: 'hadoLint'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - name: 'Running'
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: "Dockerfile"
          recursive: true
          config: ./.hadolint.yaml

  ansibleLint:
    name: 'ansibleLint'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2.3.4

      - name: 'Installing'
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint
          ansible-galaxy install -r requirements.yml

      - name: 'Running'
        run: |
          ansible-playbook PlayBook.yml --syntax-check

  Build:
    name: 'Build'
    needs: [YAMLLint, hadoLint, ansibleLint]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: github.ref_name == github.event.repository.default_branch
    env:
      REGISTRY: ghcr.io
      TAG_NAME: latest
      CACHE_IMAGE_NAME: buildcache
    steps:

      - uses: actions/checkout@v3

      - name: 'Exporting lowercase image names'
        shell: bash
        run: |
          : "${{ env.REGISTRY }}/${{ github.repository }}/ansible:latest"
          echo "IMAGE_TAG=${_,,}" | tee -a "$GITHUB_ENV"

      - name: 'Login to GHCR'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Set up docker Buildx'
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: 'Building and push docker image'
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          target: ansible
          tags: "${{ env.IMAGE_TAG }}"
          push: true

  ansibleCheck:
    name: 'ansibleCheck'
    #needs: [Build]
    runs-on: ubuntu-latest
    container: ghcr.io/openworld-community/ows-events-infrastructure/ansible:latest
    #if: github.ref_name == github.event.repository.default_branch
    env:
      APP_ENV: ${{ secrets.ENV_PRODUCTION }}
      SSH_RSA_KEY: ${{ secrets.SSH_RSA_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - uses: actions/checkout@v2

      - name: 'Prerequisites'
        run: |
          ansible-galaxy install -r requirements.yml
          mkdir -p ~/.ssh/ && touch ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa && echo "$SSH_RSA_KEY" > ~/.ssh/id_rsa
          echo "$APP_ENV" > .env

      - name: 'Deploing'
        shell: bash
        run: |
          set -o nounset -o pipefail -o errexit && set -o allexport && source .env && set +o allexport
          ansible-playbook PlayBook.yml --check --diff

  deployAnsible:
    needs: [Build, ansibleCheck]
    runs-on: ubuntu-latest
    container: ghcr.io/openworld-community/ows-events-infrastructure/ansible:latest
    if: github.ref_name == github.event.repository.default_branch
    env:
      APP_ENV: ${{ secrets.ENV_PRODUCTION }}
      SSH_RSA_KEY: ${{ secrets.SSH_RSA_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - uses: actions/checkout@v2

      - name: 'Prerequisites'
        run: |
          ansible-galaxy install -r requirements.yml
          mkdir -p ~/.ssh/ && touch ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa && echo "$SSH_RSA_KEY" > ~/.ssh/id_rsa
          echo "$APP_ENV" > .env

      - name: 'Deploing'
        shell: bash
        run: |
          set -o nounset -o pipefail -o errexit && set -o allexport && source .env && set +o allexport
          ansible-playbook PlayBook.yml
